<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mizlicai.eudemon.mapper.ServicesMapper">
  <resultMap id="BaseResultMap" type="com.mizlicai.eudemon.entity.Services">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="request_url" jdbcType="VARCHAR" property="requestUrl" />
    <result column="request_type" jdbcType="VARCHAR" property="requestType" />
    <result column="request_data_url" jdbcType="VARCHAR" property="requestDataUrl" />
    <result column="response_data_url" jdbcType="VARCHAR" property="responseDataUrl" />
    <result column="service_name" jdbcType="VARCHAR" property="serviceName" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="need_parameter" jdbcType="VARCHAR" property="needParameter" />
    <result column="project" jdbcType="VARCHAR" property="project" />
    <result column="operator_name" jdbcType="VARCHAR" property="operatorName" />
    <result column="operator_id" jdbcType="VARCHAR" property="operatorId" />
    <result column="time_out" jdbcType="INTEGER" property="timeOut" />
    <result column="concurrent_count" jdbcType="INTEGER" property="concurrentCount" />
    <result column="is_normal" jdbcType="VARCHAR" property="isNormal" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_time, update_time, request_url, request_type, request_data_url, response_data_url, 
    service_name, description, need_parameter, project, operator_name, operator_id, time_out, 
    concurrent_count, is_normal
  </sql>
  <select id="selectByExample" parameterType="com.mizlicai.eudemon.entity.ServicesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from services
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from services
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from services
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.mizlicai.eudemon.entity.ServicesExample">
    delete from services
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.mizlicai.eudemon.entity.Services">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into services (create_time, update_time, request_url, 
      request_type, request_data_url, response_data_url, 
      service_name, description, need_parameter, 
      project, operator_name, operator_id, 
      time_out, concurrent_count, is_normal
      )
    values (#{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{requestUrl,jdbcType=VARCHAR}, 
      #{requestType,jdbcType=VARCHAR}, #{requestDataUrl,jdbcType=VARCHAR}, #{responseDataUrl,jdbcType=VARCHAR}, 
      #{serviceName,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, #{needParameter,jdbcType=VARCHAR}, 
      #{project,jdbcType=VARCHAR}, #{operatorName,jdbcType=VARCHAR}, #{operatorId,jdbcType=VARCHAR}, 
      #{timeOut,jdbcType=INTEGER}, #{concurrentCount,jdbcType=INTEGER}, #{isNormal,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.mizlicai.eudemon.entity.Services">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into services
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="requestUrl != null">
        request_url,
      </if>
      <if test="requestType != null">
        request_type,
      </if>
      <if test="requestDataUrl != null">
        request_data_url,
      </if>
      <if test="responseDataUrl != null">
        response_data_url,
      </if>
      <if test="serviceName != null">
        service_name,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="needParameter != null">
        need_parameter,
      </if>
      <if test="project != null">
        project,
      </if>
      <if test="operatorName != null">
        operator_name,
      </if>
      <if test="operatorId != null">
        operator_id,
      </if>
      <if test="timeOut != null">
        time_out,
      </if>
      <if test="concurrentCount != null">
        concurrent_count,
      </if>
      <if test="isNormal != null">
        is_normal,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="requestUrl != null">
        #{requestUrl,jdbcType=VARCHAR},
      </if>
      <if test="requestType != null">
        #{requestType,jdbcType=VARCHAR},
      </if>
      <if test="requestDataUrl != null">
        #{requestDataUrl,jdbcType=VARCHAR},
      </if>
      <if test="responseDataUrl != null">
        #{responseDataUrl,jdbcType=VARCHAR},
      </if>
      <if test="serviceName != null">
        #{serviceName,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="needParameter != null">
        #{needParameter,jdbcType=VARCHAR},
      </if>
      <if test="project != null">
        #{project,jdbcType=VARCHAR},
      </if>
      <if test="operatorName != null">
        #{operatorName,jdbcType=VARCHAR},
      </if>
      <if test="operatorId != null">
        #{operatorId,jdbcType=VARCHAR},
      </if>
      <if test="timeOut != null">
        #{timeOut,jdbcType=INTEGER},
      </if>
      <if test="concurrentCount != null">
        #{concurrentCount,jdbcType=INTEGER},
      </if>
      <if test="isNormal != null">
        #{isNormal,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.mizlicai.eudemon.entity.ServicesExample" resultType="java.lang.Long">
    select count(*) from services
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update services
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.requestUrl != null">
        request_url = #{record.requestUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.requestType != null">
        request_type = #{record.requestType,jdbcType=VARCHAR},
      </if>
      <if test="record.requestDataUrl != null">
        request_data_url = #{record.requestDataUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.responseDataUrl != null">
        response_data_url = #{record.responseDataUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.serviceName != null">
        service_name = #{record.serviceName,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.needParameter != null">
        need_parameter = #{record.needParameter,jdbcType=VARCHAR},
      </if>
      <if test="record.project != null">
        project = #{record.project,jdbcType=VARCHAR},
      </if>
      <if test="record.operatorName != null">
        operator_name = #{record.operatorName,jdbcType=VARCHAR},
      </if>
      <if test="record.operatorId != null">
        operator_id = #{record.operatorId,jdbcType=VARCHAR},
      </if>
      <if test="record.timeOut != null">
        time_out = #{record.timeOut,jdbcType=INTEGER},
      </if>
      <if test="record.concurrentCount != null">
        concurrent_count = #{record.concurrentCount,jdbcType=INTEGER},
      </if>
      <if test="record.isNormal != null">
        is_normal = #{record.isNormal,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update services
    set id = #{record.id,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      request_url = #{record.requestUrl,jdbcType=VARCHAR},
      request_type = #{record.requestType,jdbcType=VARCHAR},
      request_data_url = #{record.requestDataUrl,jdbcType=VARCHAR},
      response_data_url = #{record.responseDataUrl,jdbcType=VARCHAR},
      service_name = #{record.serviceName,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      need_parameter = #{record.needParameter,jdbcType=VARCHAR},
      project = #{record.project,jdbcType=VARCHAR},
      operator_name = #{record.operatorName,jdbcType=VARCHAR},
      operator_id = #{record.operatorId,jdbcType=VARCHAR},
      time_out = #{record.timeOut,jdbcType=INTEGER},
      concurrent_count = #{record.concurrentCount,jdbcType=INTEGER},
      is_normal = #{record.isNormal,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.mizlicai.eudemon.entity.Services">
    update services
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="requestUrl != null">
        request_url = #{requestUrl,jdbcType=VARCHAR},
      </if>
      <if test="requestType != null">
        request_type = #{requestType,jdbcType=VARCHAR},
      </if>
      <if test="requestDataUrl != null">
        request_data_url = #{requestDataUrl,jdbcType=VARCHAR},
      </if>
      <if test="responseDataUrl != null">
        response_data_url = #{responseDataUrl,jdbcType=VARCHAR},
      </if>
      <if test="serviceName != null">
        service_name = #{serviceName,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="needParameter != null">
        need_parameter = #{needParameter,jdbcType=VARCHAR},
      </if>
      <if test="project != null">
        project = #{project,jdbcType=VARCHAR},
      </if>
      <if test="operatorName != null">
        operator_name = #{operatorName,jdbcType=VARCHAR},
      </if>
      <if test="operatorId != null">
        operator_id = #{operatorId,jdbcType=VARCHAR},
      </if>
      <if test="timeOut != null">
        time_out = #{timeOut,jdbcType=INTEGER},
      </if>
      <if test="concurrentCount != null">
        concurrent_count = #{concurrentCount,jdbcType=INTEGER},
      </if>
      <if test="isNormal != null">
        is_normal = #{isNormal,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mizlicai.eudemon.entity.Services">
    update services
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      request_url = #{requestUrl,jdbcType=VARCHAR},
      request_type = #{requestType,jdbcType=VARCHAR},
      request_data_url = #{requestDataUrl,jdbcType=VARCHAR},
      response_data_url = #{responseDataUrl,jdbcType=VARCHAR},
      service_name = #{serviceName,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      need_parameter = #{needParameter,jdbcType=VARCHAR},
      project = #{project,jdbcType=VARCHAR},
      operator_name = #{operatorName,jdbcType=VARCHAR},
      operator_id = #{operatorId,jdbcType=VARCHAR},
      time_out = #{timeOut,jdbcType=INTEGER},
      concurrent_count = #{concurrentCount,jdbcType=INTEGER},
      is_normal = #{isNormal,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>