<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mizlicai.eudemon.mapper.ResponseDataMapper">
  <resultMap id="BaseResultMap" type="com.mizlicai.eudemon.entity.ResponseData">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="service_id" jdbcType="VARCHAR" property="serviceId" />
    <result column="service_name" jdbcType="VARCHAR" property="serviceName" />
    <result column="response_time" jdbcType="TIMESTAMP" property="responseTime" />
    <result column="request_time" jdbcType="TIMESTAMP" property="requestTime" />
    <result column="response_status" jdbcType="VARCHAR" property="responseStatus" />
    <result column="response_data" jdbcType="VARCHAR" property="responseData" />
    <result column="request_id" jdbcType="INTEGER" property="requestId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_time, update_time, service_id, service_name, response_time, request_time, 
    response_status, response_data, request_id
  </sql>
  <select id="selectByExample" parameterType="com.mizlicai.eudemon.entity.ResponseDataExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from response_data
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from response_data
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from response_data
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.mizlicai.eudemon.entity.ResponseDataExample">
    delete from response_data
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.mizlicai.eudemon.entity.ResponseData">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into response_data (create_time, update_time, service_id, 
      service_name, response_time, request_time, 
      response_status, response_data, request_id
      )
    values (#{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{serviceId,jdbcType=VARCHAR}, 
      #{serviceName,jdbcType=VARCHAR}, #{responseTime,jdbcType=TIMESTAMP}, #{requestTime,jdbcType=TIMESTAMP}, 
      #{responseStatus,jdbcType=VARCHAR}, #{responseData,jdbcType=VARCHAR}, #{requestId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.mizlicai.eudemon.entity.ResponseData">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into response_data
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="serviceId != null">
        service_id,
      </if>
      <if test="serviceName != null">
        service_name,
      </if>
      <if test="responseTime != null">
        response_time,
      </if>
      <if test="requestTime != null">
        request_time,
      </if>
      <if test="responseStatus != null">
        response_status,
      </if>
      <if test="responseData != null">
        response_data,
      </if>
      <if test="requestId != null">
        request_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="serviceId != null">
        #{serviceId,jdbcType=VARCHAR},
      </if>
      <if test="serviceName != null">
        #{serviceName,jdbcType=VARCHAR},
      </if>
      <if test="responseTime != null">
        #{responseTime,jdbcType=TIMESTAMP},
      </if>
      <if test="requestTime != null">
        #{requestTime,jdbcType=TIMESTAMP},
      </if>
      <if test="responseStatus != null">
        #{responseStatus,jdbcType=VARCHAR},
      </if>
      <if test="responseData != null">
        #{responseData,jdbcType=VARCHAR},
      </if>
      <if test="requestId != null">
        #{requestId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.mizlicai.eudemon.entity.ResponseDataExample" resultType="java.lang.Long">
    select count(*) from response_data
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update response_data
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.serviceId != null">
        service_id = #{record.serviceId,jdbcType=VARCHAR},
      </if>
      <if test="record.serviceName != null">
        service_name = #{record.serviceName,jdbcType=VARCHAR},
      </if>
      <if test="record.responseTime != null">
        response_time = #{record.responseTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.requestTime != null">
        request_time = #{record.requestTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.responseStatus != null">
        response_status = #{record.responseStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.responseData != null">
        response_data = #{record.responseData,jdbcType=VARCHAR},
      </if>
      <if test="record.requestId != null">
        request_id = #{record.requestId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update response_data
    set id = #{record.id,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      service_id = #{record.serviceId,jdbcType=VARCHAR},
      service_name = #{record.serviceName,jdbcType=VARCHAR},
      response_time = #{record.responseTime,jdbcType=TIMESTAMP},
      request_time = #{record.requestTime,jdbcType=TIMESTAMP},
      response_status = #{record.responseStatus,jdbcType=VARCHAR},
      response_data = #{record.responseData,jdbcType=VARCHAR},
      request_id = #{record.requestId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.mizlicai.eudemon.entity.ResponseData">
    update response_data
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="serviceId != null">
        service_id = #{serviceId,jdbcType=VARCHAR},
      </if>
      <if test="serviceName != null">
        service_name = #{serviceName,jdbcType=VARCHAR},
      </if>
      <if test="responseTime != null">
        response_time = #{responseTime,jdbcType=TIMESTAMP},
      </if>
      <if test="requestTime != null">
        request_time = #{requestTime,jdbcType=TIMESTAMP},
      </if>
      <if test="responseStatus != null">
        response_status = #{responseStatus,jdbcType=VARCHAR},
      </if>
      <if test="responseData != null">
        response_data = #{responseData,jdbcType=VARCHAR},
      </if>
      <if test="requestId != null">
        request_id = #{requestId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mizlicai.eudemon.entity.ResponseData">
    update response_data
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      service_id = #{serviceId,jdbcType=VARCHAR},
      service_name = #{serviceName,jdbcType=VARCHAR},
      response_time = #{responseTime,jdbcType=TIMESTAMP},
      request_time = #{requestTime,jdbcType=TIMESTAMP},
      response_status = #{responseStatus,jdbcType=VARCHAR},
      response_data = #{responseData,jdbcType=VARCHAR},
      request_id = #{requestId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>